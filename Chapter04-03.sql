USE tempdb

IF OBJECT_ID(N'DBO.T1',N'U') IS NOT NULL DROP TABLE DBO.T1;

CREATE TABLE DBO.T1
(
COL1 INT NOT NULL IDENTITY, 
COL2 VARCHAR(100) NOT NULL, 
FILLER BINARY(2000) NULL DEFAULT(0X), 
CONSTRAINT PK_T1 PRIMARY KEY(COL1)
)

INSERT INTO DBO.T1(COL2) SELECT 'STRING '+ CAST(N AS VARCHAR(10))
FROM TSQLV3.DBO.GetNums(1,100) AS NUMS;

DECLARE @S AS VARCHAR(MAX);
SET @S = '';

SELECT @S = @S+COL2 + ';'
FROM DBO.T1
ORDER BY COL1;

PRINT @S

CREATE NONCLUSTERED INDEX IDX_NC_COL2_I_COL1 ON DBO.T1 (COL2, COL1);
GO

DECLARE @S AS VARCHAR(MAX);
SET @S = '';

SELECT @S = @S+COL2 + ';'
FROM DBO.T1
ORDER BY COL1;

PRINT @S

-- AGGREDATE PRODUCT

SELECT GROUPID, ROUND(EXP(SUM(LOG(VAL))),0) AS PRODUCT
FROM DBO.Groups
GROUP BY GROUPID;

--PG 416
TRUNCATE TABLE dbo.Groups;
INSERT INTO dbo.Groups(groupid, memberid, string, val) VALUES
('a', 3, 'stra1', -6),
('a', 9, 'stra2', 7),
('b', 2, 'strb1', -3),
('b', 4, 'strb2', -7),
('b', 5, 'strb3', 3),
('b', 9, 'strb4', 11),
('c', 3, 'strc1', 8),
('c', 7, 'strc2', 0),
('c', 9, 'strc3', 12);

SELECT groupid, ROUND(EXP(SUM(LOG(val))), 0) AS product
FROM dbo.Groups
GROUP BY groupid;

SELECT GROUPID , 
ROUND(EXP(SUM(LOG(ABS((NULLIF(VAL,0)))))),0) AS PRODUCT, 
MIN(CASE WHEN VAL = 0 THEN 0 ELSE 1 END) AS ZERO
, CASE WHEN COUNT(CASE WHEN VAL < 0 THEN 1 END)%2>0 THEN -1 ELSE 1 END AS NEGATIVE
FROM DBO.GROUPS
GROUP BY groupid

SELECT GROUPID , 
ROUND(EXP(SUM(LOG(ABS((NULLIF(VAL,0)))))),0) * MIN(CASE WHEN VAL = 0 THEN 0 ELSE 1 END) 
* CASE WHEN COUNT(CASE WHEN VAL < 0 THEN 1 END)%2>0 THEN -1 ELSE 1 END AS NEGATIVE
FROM DBO.GROUPS
GROUP BY groupid


--PG 418

USE TSQLV3
WITH C AS 
(
SELECT CUSTID, EMPID, COUNT(*) AS CNT,
ROW_NUMBER() OVER (PARTITION BY CUSTID ORDER BY COUNT(*) DESC, EMPID DESC) AS RN
FROM SALES.ORDERS
GROUP BY CUSTID, EMPID
)

SELECT CUSTID, EMPID, CNT 
FROM C
WHERE RN =1

USE TSQLV3
WITH C AS 
(
SELECT CUSTID, EMPID, COUNT(*) AS CNT,
RANK() OVER (PARTITION BY CUSTID ORDER BY COUNT(*) DESC) AS RN
FROM SALES.ORDERS
GROUP BY CUSTID, EMPID
)

SELECT CUSTID, EMPID, CNT 
FROM C
WHERE RN =1
--
SELECT CUSTID, 
CAST(SUBSTRING(MAX(BINVAL),5,4) AS INT) AS EMPID, 
CAST(SUBSTRING(MAX(BINVAL), 1,4) AS INT) AS CNT
FROM 

(SELECT CUSTID, 
CAST(COUNT(*) AS BINARY(4)) + CAST(EMPID AS BINARY(4)) AS BINVAL
FROM SALES.ORDERS
GROUP BY custid, EMPID) AS D
GROUP BY CUSTID;


-- GROUPING SETS

SET NOCOUNT ON;
USE tempdb;
IF OBJECT_ID(N'dbo.Orders', N'U') IS NOT NULL DROP TABLE dbo.Orders;
CREATE TABLE dbo.Orders
(
orderid INT NOT NULL,
orderdate DATETIME NOT NULL,
empid INT NOT NULL,
custid VARCHAR(5) NOT NULL,
qty INT NOT NULL,
CONSTRAINT PK_Orders PRIMARY KEY(orderid)
);
GO
INSERT INTO dbo.Orders
(orderid, orderdate, empid, custid, qty)
VALUES
(30001, '20120802', 3, 'A', 10),
(10001, '20121224', 1, 'A', 12),
(10005, '20121224', 1, 'B', 20),
(40001, '20130109', 4, 'A', 40),
(10006, '20130118', 1, 'C', 14),
(20001, '20130212', 2, 'B', 12),
(40005, '20140212', 4, 'A', 10),
(20002, '20140216', 2, 'C', 20),
(30003, '20140418', 3, 'B', 15),
(30004, '20120418', 3, 'C', 22),
(30007, '20120907', 3, 'D', 30);


-- grouping sets sub clause

SELECT CUSTID, EMPID, YEAR(ORDERDATE) AS ORDERYEAR, SUM(QTY) AS QTY
FROM DBO.ORDERS
GROUP BY GROUPING SETS
(
(CUSTID, EMPID, YEAR(ORDERDATE)), 
(CUSTID, YEAR(ORDERDATE)),
(EMPID, YEAr(ORDERDATE)), 
()
);

ALTER TABLE DBO.ORDERS ADD ORDERYEAR AS YEAR(ORDERDATE);
GO 
CREATE INDEX idx_eid_oy_cid_i_qty ON DBO.orders(EMPID, ORDERYEAR, CUSTID)
INCLUDE(QTY);

CREATE INDEX idx_oy_cid_i_qty ON DBO.ORDERS(ORDERYEAR, CUSTID) INCLUDE(QTY);


-- CUBE AND ROLLUP CLAUSE

SELECT CUSTID, EMPID, SUM(QTY) AS QTY
FROM DBO.Orders
GROUP BY CUBE(CUSTID, EMPID)

SELECT CUSTID, EMPID, SUM(QTY) AS QTY
FROM DBO.Orders
GROUP BY GROUPING SETS
(( custid, empid ),
( custid ),
( empid ),
())


-- ROLLUP

SELECT  
	YEAR(ORDERDATE) AS YEAR, 
	MONTH(ORDERDATE) AS MONTH, 
	DAY(ORDERDATE) AS DAY,
	SUM(QTY) AS QTY
	FROM DBO.ORDERS
	GROUP BY
	ROLLUP(YEAR(ORDERDATE), MONTH(ORDERDATE), DAY(ORDERDATE));



-- GROUPING SETS ALGEBRA

SELECT  
CUSTID, 
EMPID, 
	YEAR(ORDERDATE) AS YEAR, 
	MONTH(ORDERDATE) AS MONTH, 
	DAY(ORDERDATE) AS DAY,
	SUM(QTY) AS QTY
	FROM DBO.ORDERS
	GROUP BY
	CUBE(custid, empid), 
	ROLLUP(YEAR(ORDERDATE), MONTH(ORDERDATE), DAY(ORDERDATE));


	SELECT  
CUSTID, 
EMPID, 
	YEAR(ORDERDATE) AS YEAR, 
	MONTH(ORDERDATE) AS MONTH, 
	DAY(ORDERDATE) AS DAY,
	SUM(QTY) AS QTY
	FROM DBO.ORDERS
	GROUP BY
	GROUPING SETS
(
( custid, empid ),
( custid ),
( empid )
),
	ROLLUP(YEAR(ORDERDATE), MONTH(ORDERDATE), DAY(ORDERDATE));

	-- MATERLIAIZING GROUPING SETS. 
	PG 429