--USE tempdb;

--IF OBJECT_ID(N'DBO.V', N'V') IS NOT NULL DROP VIEW DBO.V;
--IF OBJECT_ID(N'DBO.T3', N'U') IS NOT NULL DROP TABLE DBO.T3;
--IF OBJECT_ID(N'DBO.T2', N'U') IS NOT NULL DROP TABLE DBO.T2;
--IF OBJECT_ID(N'DBO.T1', N'U') IS NOT NULL DROP TABLE DBO.T1;


--GO 

--CREATE TABLE DBO.T1(
--KEYCOL INT NOT NULL CONSTRAINT PL_T1 PRIMARY KEY,
--COL1 INT NOT NULL
--)

--CREATE TABLE dbo.T2
--(
--keycol INT NOT NULL
--CONSTRAINT PK_T2 PRIMARY KEY
--CONSTRAINT FK_T2_T1 REFERENCES dbo.T1,
--col2 INT NOT NULL
--);
--CREATE TABLE dbo.T3
--(
--keycol INT NOT NULL
--CONSTRAINT PK_T3 PRIMARY KEY
--CONSTRAINT FK_T3_T1 REFERENCES dbo.T1,
--col3 INT NOT NULL
--);
--GO

--CREATE VIEW DBO.V WITH SCHEMABINDING

--AS 
--SELECT  T1.COL1 , T1.KEYCOL, T2.col2, T3.col3
--FROM DBO.T1
--INNER JOIN DBO.T2
--ON T1.KEYCOL = T2.keycol
--INNER JOIN DBO.T3
--ON T1.KEYCOL = T3.KEYCOL;



--SELECT * FROM dbo.V;


-- INLINE TABLE VALUE FUNCTION
--USE TSQLV3

--IF OBJECT_ID(N'DBO.GETTOPORDERS',N'IF') IS NOT NULL DROP FUNCTION
--DBO.GETTOPORDERS;

--GO
--CREATE FUNCTION DBO.GETTOPORDERS(@CUSTID AS INT, @N AS BIGINT) RETURNS TABLE
--AS 
--RETURN

--SELECT TOP (@N) ORDERID, ORDERDATE, EMPID
--FROM SALES.ORDERS
--WHERE CUSTID = @CUSTID
--ORDER BY ORDERDATE DESC, ORDERID DESC;
--GO


--SELECT ORDERID, ORDERDATE, EMPID
--FROM DBO.GETTOPORDERS(1,3) AS O;

--GENERATING NUMBERS

--CREATE FUNCTION DBO.GETNUMS(@LOW AS INT, @HIGH AS INT) RETURNS TABLE 
--AS 
--RETURN 
--SELECT c FROM (VALUES(1), (1)) AS D(C);

--DECLARE @LOW AS BIGINT = 11, @HIGH AS BIGINT = 20;
--WITH 
--L0 AS (SELECT C FROM (VALUES(1), (1)) AS D(C)),
--L1 AS (SELECT 1 AS C FROM L0 AS A CROSS JOIN L0 AS B),
--L2 AS (SELECT 1 AS C FROM L1 AS A CROSS JOIN L1 AS B),
--L3 AS (SELECT 1 AS C FROM L2 AS A CROSS JOIN L2 AS B),
--L4 AS (SELECT 1 AS C FROM L3 AS A CROSS JOIN L3 AS B),
--L5 AS (SELECT 1 AS C FROM L4 AS A CROSS JOIN L4 AS B),
--NUMS AS (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS ROWNUM FROM L5)



--SELECT TOP(@HIGH - @LOW +1)  @LOW + ROWNUM -1 AS N
--FROM NUMS
--ORDER BY ROWNUM;

--IF OBJECT_ID(N'DBO.GETNUM', N'IF') IS NOT NULL DROP FUNCTION DBO.GETNUMS;
--GO
--CREATE FUNCTION DBO.GETNUM(@LOW AS BIGINT, @HIGH AS BIGINT ) RETURNS TABLE
--AS 
--RETURN 
--WITH
--L0 AS (SELECT c FROM (VALUES(1),(1)) AS D(c)),
--L1 AS (SELECT 1 AS c FROM L0 AS A CROSS JOIN L0 AS B),
--L2 AS (SELECT 1 AS c FROM L1 AS A CROSS JOIN L1 AS B),
--L3 AS (SELECT 1 AS c FROM L2 AS A CROSS JOIN L2 AS B),
--L4 AS (SELECT 1 AS c FROM L3 AS A CROSS JOIN L3 AS B),
--L5 AS (SELECT 1 AS c FROM L4 AS A CROSS JOIN L4 AS B),
--Nums AS (SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS rownum
--FROM L5)
--SELECT TOP(@high - @low + 1) @low + rownum - 1 AS n
--FROM Nums
--ORDER BY rownum;
--GO


--SELECT N FROM DBO.GETNUM(11, 20)

--THE  APPLY OPERATOR 
--CROSS APPLY OPERATOR 

USE TSQLV3;

--CREATE UNIQUE INDEX IDX_POC
--ON SALES.ORDERS(CUSTID, ORDERDATE DESC, ORDERID DESC) 
--INCLUDE (EMPID);


--SELECT orderid, ORDERDATE, custid, empid
--FROM Sales.ORDERS
--WHERE ORDERID IN 
--(
--SELECT 
--	(SELECT TOP(1) ORDERID FROM SALES.ORDERS AS O
--WHERE O.custid = C.CUSTID
--ORDER BY orderdate DESC, orderid DESC)
--FROM SALES.Customers AS C)



--SELECT C.CUSTID, A.ORDERID, a.ORDERDATE, A. EMPID
--FROM SALES.CUSTOMERS AS C
--CROSS APPLY
--(SELECT TOP (3) orderid, ORDERDATE, custid, empid
--FROM Sales.ORDERS AS O
--WHERE O.CUSTID = C.CUSTID 
--ORDER BY ORDERDATE DESC, ORDERID DESC) AS A


---- FUNCTION 
--IF OBJECT_ID(N'dbo.GetTopOrders', N'IF') IS NOT NULL DROP FUNCTION
--dbo.GetTopOrders;
--GO
--CREATE FUNCTION dbo.GetTopOrders(@custid AS INT, @n AS BIGINT)
--RETURNS TABLE
--AS
--RETURN
--SELECT TOP (@n) orderid, orderdate, empid
--FROM Sales.Orders
--WHERE custid = @custid
--ORDER BY orderdate DESC, orderid DESC;
--GO



--SELECT C.custid, A.orderid, A.orderdate, A.empid
--FROM Sales.Customers AS C
--CROSS APPLY dbo.GetTopOrders( C.custid, 3 ) AS A;

-- THE OUTER APPLY OPERATOR 298


--USE TSQLV3;

--SELECT C.custid, A.ORDERID, A.orderdate, A.empid
--FROM SALES.CUSTOMERS AS C
--OUTER APPLY DBO.GetTopOrders(C.CUSTID, 3) AS A;


---- IMPLICIT APPLY

----SELECT C.CUSTID, 
----( SELECT COUNT(DISTINCT EMPID) FROM DBO.GetTopOrders ( C.CUSTID, 10)  ) AS NUMEMPS
----FROM SALES.Customers AS C;


--SELECT orderid, orderdate
--FROM Sales.ORDERS 
--CROSS APPLY(VALUES ( YEAR(ORDERDATE))) AS A1(ORDERYEAR)
--CROSS APPLY(VALUES ( DATEFROMPARTS(ORDERYEAR,1,1),
--					DATEFROMPARTS(ORDERYEAR,12,31)))
--					AS A2 (BEGINININGOFYER, ENDOFYEAR)
--					WHERE ORDERDATE IN (BEGINININGOFYER, ENDOFYEAR)


--DROP INDEX idx_poc ON Sales.Orders;


PG - 301





